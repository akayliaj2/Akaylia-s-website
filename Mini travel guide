<html lang="en"><head><script>(function(firebaseConfig, initialAuthToken, appId) {
        window.__firebase_config = firebaseConfig;
        window.__initial_auth_token = initialAuthToken;
        window.__app_id = appId;
            })("\n{\n  \"apiKey\": \"AIzaSyCqyCcs2R2e7AegGjvFAwG98wlamtbHvZY\",\n  \"authDomain\": \"bard-frontend.firebaseapp.com\",\n  \"projectId\": \"bard-frontend\",\n  \"storageBucket\": \"bard-frontend.firebasestorage.app\",\n  \"messagingSenderId\": \"175205271074\",\n  \"appId\": \"1:175205271074:web:2b7bd4d34d33bf38e6ec7b\"\n}\n","eyJhbGciOiJSUzI1NiIsImtpZCI6IjNmZGRhYjhmMWJhNjVjMzczMDFhMWQwNWU3YjBjYjM3Y2Y5MWEwNTgiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJmaXJlYmFzZS1hZG1pbnNkay1mYnN2Y0BiYXJkLWZyb250ZW5kLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwiYXVkIjoiaHR0cHM6XC9cL2lkZW50aXR5dG9vbGtpdC5nb29nbGVhcGlzLmNvbVwvZ29vZ2xlLmlkZW50aXR5LmlkZW50aXR5dG9vbGtpdC52MS5JZGVudGl0eVRvb2xraXQiLCJ1aWQiOiIxNjEyMDE2OTc5MTA3OTc0NjQwOSIsImlzcyI6ImZpcmViYXNlLWFkbWluc2RrLWZic3ZjQGJhcmQtZnJvbnRlbmQuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJleHAiOjE3NDc3NjQ5MzksImlhdCI6MTc0Nzc2MTMzOSwiYWxnIjoiUlMyNTYifQ.qimjHfy6XH7kfPG-GjgCOet-x83IaFsQF8ZxN-jJr-yLN4FdWHs3QfupFAsqQ-Y8p7qg3mHRpHkA6anl6t3PYDntJermg87DvL1sLJ5XSzDcS-3UUMgSc9fURLiviC_X3ICCTTIBxZs-AsdnoRQGC6vuwDFCAoyVFgHhnB0eBbSgMiiquErBk6QBOv8_k0tmbC3EY3Y6SQIlsrPIbZEtDmqvKXGV-WNYMO8jYuxPV-lB98YS2Pq6J8pxMmcXCNyNM00dCdcbGilMQ4r5SROmoFAAl3RJ3ibVDZWGCeSuTTmTr-AZUZmzqgJ61d4EVa6sVO75if9vfPmGf01yIymi7w","c_c1627d1cde2bd088_thailand_travel_guide_html-649")</script><script>(function() {
  // Ensure this script is executed only once
  if (window.firebaseAuthBridgeScriptLoaded) {
    return;
  }
  window.firebaseAuthBridgeScriptLoaded = true;

  let nextTokenPromiseId = 0;

  // Stores { resolve, reject } for ongoing token requests
  const pendingTokenPromises = {};

  // Listen for messages from the Host Application
  window.addEventListener('message', function(event) {

    const messageData = event.data;

  if (messageData && messageData.type === 'RESOLVE_NEW_FIREBASE_TOKEN') {
      const { success, token, error, promiseId } = messageData ?? {};
      if (pendingTokenPromises[promiseId]) {
        if (success) {
          pendingTokenPromises[promiseId].resolve(token);
        } else {
          pendingTokenPromises[promiseId].reject(new Error(error || 'Token refresh failed from host.'));
        }
        delete pendingTokenPromises[promiseId];
      }
    }
  });
